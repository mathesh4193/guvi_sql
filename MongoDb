//Zen Class MongoDB Task
//1.Create Database & Collections
//use zenclass
db.createCollection("users")
db.createCollection("codekata")
db.createCollection("attendance")
db.createCollection("topics")
db.createCollection("tasks")
db.createCollection("company_drives")
db.createCollection("mentors")


//2. Insert Sample Data
// Users
db.users.insertMany([
 { _id: 1, name: "Asha", email:"asha@example.com", batch:"B45", mentor_id: 101 },
 { _id: 2, name: "Bala", email:"bala@example.com", batch:"B45", mentor_id: 101 },
 { _id: 3, name: "Chait", email:"chait@example.com", batch:"B45", mentor_id: 101 }
])


// Mentors
db.mentors.insertOne({
 _id: 101,
 name: "Nikil Mentor",
 email: "Nikil@example.com",
 mentees: [1, 2, 3]
})

//Topics
db.topics.insertMany([
 { _id: 201, topic: "MongoDB Basics", taught_on: ISODate("2020-10-18") },
 { _id: 202, topic: "NodeJS Async", taught_on: ISODate("2020-10-20") },
 { _id: 203, topic: "HTML & CSS", taught_on: ISODate("2020-09-28") }
])


// Tasks
db.tasks.insertMany([
 {
 _id: 301,
 topic_id: 201,
 title: "Build Mongo Queries",
 assigned_on: ISODate("2020-10-18"),
 due_on: ISODate("2020-10-21"),
 submissions: [
 { user_id: 1, submitted: true, submitted_on: ISODate("2020-10-19") },
 { user_id: 2, submitted: false }]},
 {
 _id: 302,
 topic_id: 202,
 title: "Implement Async Flow",
 assigned_on: ISODate("2020-10-20"),
 due_on: ISODate("2020-10-25"),
 submissions: [
 { user_id: 1, submitted: true, submitted_on: ISODate("2020-10-22") }]}])


// Codekata
db.codekata.insertMany([
 { user_id: 1, problems: 2 },
 { user_id: 2, problems: 1 },
 { user_id: 3, problems: 0 }
])


// Attendance
db.attendance.insertMany([
 { user_id: 1, date: ISODate("2020-10-18"), status: "present" },
 { user_id: 2, date: ISODate("2020-10-18"), status: "absent" },
 { user_id: 3, date: ISODate("2020-10-20"), status: "absent" }
])


// Company Drives
db.company_drives.insertMany([
 { _id: 401, company: "TechCorp", drive_date: ISODate("2020-10-18"), students_appeared: [1, 3] },
 { _id: 402, company: "InnovaSoft", drive_date: ISODate("2020-11-05"), students_appeared: [2] }
])


//Queries
//A) Topics and Tasks in October 2020
db.topics.find(
 { taught_on: { $gte: ISODate("2020-10-01"), $lt: ISODate("2020-11-01") } },
 { _id: 0, topic: 1, taught_on: 1 }
)
db.tasks.find(
 { assigned_on: { $gte: ISODate("2020-10-01"), $lt: ISODate("2020-11-01") } },
 { _id: 0, title: 1, assigned_on: 1 }
)
//B) Company drives between 15-Oct-2020 and 31-Oct-2020
db.company_drives.find(
 { drive_date: { $gte: ISODate("2020-10-15"), $lt: ISODate("2020-11-01") } },
 { _id: 0, company: 1, drive_date: 1 }
)
//C) Company drives and students appeared
db.company_drives.aggregate([
 {
 $lookup: {
 from: "users",
 localField: "students_appeared",
 foreignField: "_id",
 as: "students"
 }
 },
 {
 $project: {
 _id: 0,
 company: 1,
 drive_date: 1,
 "students.name": 1,
 "students.email": 1
 }
 }
])
//D) Number of problems solved by each user
db.codekata.aggregate([
 {
 $lookup: {
 from: "users",
 localField: "user_id",
 foreignField: "_id",
 as: "user"
 }
 },
 { $unwind: "$user" },
 {
 $project: {
 _id: 0,
 name: "$user.name",
 problems: 1
 }
 }
])
//E) Mentors with mentee count > 15
db.mentors.aggregate([
 { $addFields: { menteeCount: { $size: "$mentees" } } },
 { $match: { menteeCount: { $gt: 15 } } },
 { $project: { _id: 0, name: 1, menteeCount: 1 } }
])
//F) Users absent and not submitted tasks between 15-Oct and 31-Oct
db.attendance.aggregate([
 {
 $match: {
 date: { $gte: ISODate("2020-10-15"), $lt: ISODate("2020-11-01") },
 status: "absent"
 }
 },
 { $group: { _id: "$user_id" } },
 {
 $lookup: {
 from: "tasks",
 let: { uid: "$_id" },
 pipeline: [
 { $match: { assigned_on: { $gte: ISODate("2020-10-15"), $lt: ISODate("2020-11-01") } } },
 { $match: { $expr: { $not: [{ $in: ["$$uid", "$submissions.user_id"] }] } } }
 ],
 as: "not_submitted"
 }
 },
 { $match: { "not_submitted.0": { $exists: true } } },
 { $count: "AbsentAndNotSubmittedUsers" }
])